{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAsCA,SAASC,EAAcC,EAAUC,GAG/B,OAFAC,QAAQC,IAAI,YAEL,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEL,E,MAAUC,IAEpBK,EAAO,C,SAAEN,E,MAAUC,GAAQ,GAE5BA,EAAM,G,EA/CA,CACXU,KAAMC,SAASC,cAAc,WAO1BF,KAAKG,iBAAiB,UAOV,SAAKC,GACpBA,EAAEC,iBAEF,MAAMC,OAAEA,EAAQhB,MAAAiB,EAAKC,KAAEA,GAASJ,EAAEK,OAAOC,SACzCnB,QAAQoB,IAAIP,EAAEK,QAEd,IAAIG,GAAcL,EAAMM,MAExB,IAAK,IAAIC,EAAI,EAAGA,IAAMR,EAAOO,MAAOC,GAAK,EACvC1B,EAAc0B,EAAGF,GACdG,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA8B,OAAOC,QAAQ,uBAAqB5B,QAAiBC,MAAU,IAEhE4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA8B,OAAOG,QAAQ,sBAAoB9B,QAAiBC,MAAU,IAElEsB,IAAeJ,EAAKK,MAEtBT,EAAEgB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  // delay: document.querySelector('input[name=\"delay\"]'),\n  // step: document.querySelector('input[name=\"step\"]'),\n  // amount: document.querySelector('input[name=\"amount\"]'),\n  // submit: document.querySelector('button[type=\"submit\"]'),\n};\n\nrefs.form.addEventListener('submit', onSubmitForm);\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay)\n// стільки разів, скільки ввели в поле amount.Під час кожного виклику передай їй номер\n// промісу(position), що створюється, і затримку, враховуючи першу затримку(delay), введену\n// користувачем, і крок(step).\n\nfunction onSubmitForm(e) {\n  e.preventDefault();\n\n  const { amount, delay, step } = e.target.elements;\n  console.dir(e.target);\n\n  let delayValue = +delay.value;\n\n  for (let i = 1; i <= +amount.value; i += 1) {\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delayValue += +step.value;\n  }\n  e.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  console.log('she work');\n\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// console.log(createPromise());\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який\n// виконується або відхиляється через delay часу.Значенням промісу повинен бути об'єкт,\n//  в якому будуть властивості position і delay зі значеннями однойменних параметрів.\n//  Використовуй початковий код функції для вибору того, що потрібно зробити з промісом -\n//   виконати або відхилити.\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","console","log","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","form","document","querySelector","addEventListener","e","preventDefault","amount","delay1","step","target","elements","dir","delayValue","value","i","then","Notify","success","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.90677df2.js.map"}