{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAsCA,SAASC,EAAcC,EAAUC,GAG/B,OAFAC,QAAQC,IAAI,YAEL,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEL,WAAUC,UAEpBK,EAAO,CAAEN,WAAUC,S,GAEpBA,E,KA/CM,CACXU,KAAMC,SAASC,cAAc,WAO1BF,KAAKG,iBAAiB,UAOV,SAAKC,GACpBA,EAAEC,iBAEF,IAAgCC,EAAAF,EAAEG,OAAOC,SAAjCC,EAAwBH,EAAxBG,OAAQC,EAAgBJ,EAAhBhB,MAAOqB,EAASL,EAATK,KACvBpB,QAAQqB,IAAIR,EAAEG,QAId,IAFA,IAAIM,GAAcH,EAAMI,MAEfC,EAAI,EAAGA,IAAMN,EAAOK,MAAOC,GAAK,EACvC3B,EAAc2B,EAAGF,GACdG,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MACjBJ,EAAAgC,OAAOC,QAAQ,uBAAwCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAE9D+B,OAAM,SAAAJ,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MAClBJ,EAAAgC,OAAOI,QAAQ,sBAAuCF,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAEhEuB,IAAeF,EAAKG,MAEtBV,EAAEmB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  // delay: document.querySelector('input[name=\"delay\"]'),\n  // step: document.querySelector('input[name=\"step\"]'),\n  // amount: document.querySelector('input[name=\"amount\"]'),\n  // submit: document.querySelector('button[type=\"submit\"]'),\n};\n\nrefs.form.addEventListener('submit', onSubmitForm);\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay)\n// стільки разів, скільки ввели в поле amount.Під час кожного виклику передай їй номер\n// промісу(position), що створюється, і затримку, враховуючи першу затримку(delay), введену\n// користувачем, і крок(step).\n\nfunction onSubmitForm(e) {\n  e.preventDefault();\n\n  const { amount, delay, step } = e.target.elements;\n  console.dir(e.target);\n\n  let delayValue = +delay.value;\n\n  for (let i = 1; i <= +amount.value; i += 1) {\n    createPromise(i, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delayValue += +step.value;\n  }\n  e.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  console.log('she work');\n\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// console.log(createPromise());\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який\n// виконується або відхиляється через delay часу.Значенням промісу повинен бути об'єкт,\n//  в якому будуть властивості position і delay зі значеннями однойменних параметрів.\n//  Використовуй початковий код функції для вибору того, що потрібно зробити з промісом -\n//   виконати або відхилити.\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","console","log","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","form","document","querySelector","addEventListener","e","preventDefault","_elements","target","elements","amount","delay1","step","dir","delayValue","value","i","then","param","Notify","success","concat","catch","failure","currentTarget","reset"],"version":3,"file":"03-promises.ba1681a3.js.map"}